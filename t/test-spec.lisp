;; WARNING! This file was generated by gen-test-spec.lisp script.
;;          Don't edit it manually!
;;          To update the file, clone spec repository:
;;
;;          git clone https://github.com/mustache/spec t/spec
;;
;;          Then do this in the REPL:
;;
;;          CL-USER> (ql:quickload '(cl-json cl-fad alexandria))
;;          CL-USER> (load "t/gen-test-spec.lisp")
;;          CL-USER> (cl-user::update-spec-tests)


(defpackage #:mustache-test-spec
  (:use #:cl #:prove))
(in-package :mustache-test-spec)

(plan 194)

;; Spec filename: comments.json


(is
 (mustache:render* "12345{{! Comment Block! }}67890"
                   (mustache:make-context :data `nil :partials 'nil))
 "1234567890"
 (format nil "~A :: ~A" "Inline"
         "Comment blocks should be removed from the template."))

(is
 (mustache:render* "12345{{!
  This is a
  multi-line comment...
}}67890
"
                   (mustache:make-context :data `nil :partials 'nil))
 "1234567890
"
 (format nil "~A :: ~A" "Multiline" "Multiline comments should be permitted."))

(is
 (mustache:render* "Begin.
{{! Comment Block! }}
End.
"
                   (mustache:make-context :data `nil :partials 'nil))
 "Begin.
End.
"
 (format nil "~A :: ~A" "Standalone"
         "All standalone comment lines should be removed."))

(is
 (mustache:render* "Begin.
  {{! Indented Comment Block! }}
End.
"
                   (mustache:make-context :data `nil :partials 'nil))
 "Begin.
End.
"
 (format nil "~A :: ~A" "Indented Standalone"
         "All standalone comment lines should be removed."))

(is
 (mustache:render* "|
{{! Standalone Comment }}
|"
                   (mustache:make-context :data `nil :partials 'nil))
 "|
|"
 (format nil "~A :: ~A" "Standalone Line Endings"
         "\"\\r\\n\" should be considered a newline for standalone tags."))

(is
 (mustache:render* "  {{! I'm Still Standalone }}
!"
                   (mustache:make-context :data `nil :partials 'nil))
 "!"
 (format nil "~A :: ~A" "Standalone Without Previous Line"
         "Standalone tags should not require a newline to precede them."))

(is
 (mustache:render* "!
  {{! I'm Still Standalone }}"
                   (mustache:make-context :data `nil :partials 'nil))
 "!
"
 (format nil "~A :: ~A" "Standalone Without Newline"
         "Standalone tags should not require a newline to follow them."))

(is
 (mustache:render* "Begin.
{{!
Something's going on here...
}}
End.
"
                   (mustache:make-context :data `nil :partials 'nil))
 "Begin.
End.
"
 (format nil "~A :: ~A" "Multiline Standalone"
         "All standalone comment lines should be removed."))

(is
 (mustache:render* "Begin.
  {{!
    Something's going on here...
  }}
End.
"
                   (mustache:make-context :data `nil :partials 'nil))
 "Begin.
End.
"
 (format nil "~A :: ~A" "Indented Multiline Standalone"
         "All standalone comment lines should be removed."))

(is
 (mustache:render* "  12 {{! 34 }}
"
                   (mustache:make-context :data `nil :partials 'nil))
 "  12 
"
 (format nil "~A :: ~A" "Indented Inline"
         "Inline comments should not strip whitespace"))

(is
 (mustache:render* "12345 {{! Comment Block! }} 67890"
                   (mustache:make-context :data `nil :partials 'nil))
 "12345  67890"
 (format nil "~A :: ~A" "Surrounding Whitespace"
         "Comment removal should preserve surrounding whitespace."))

(is
 (mustache:render* "comments never show: >{{! comment }}<"
                   (mustache:make-context :data
                                          `((:|! COMMENT| . 1)
                                            (:|! COMMENT | . 2) (:!comment . 3)
                                            (:comment . 4))
                                          :partials 'nil))
 "comments never show: ><"
 (format nil "~A :: ~A" "Variable Name Collision"
         "Comments must never render, even if variable with same name exists."))

;; Spec filename: delimiters.json


(is
 (mustache:render* "{{=<% %>=}}(<%text%>)"
                   (mustache:make-context :data `((:text . "Hey!")) :partials
                                          'nil))
 "(Hey!)"
 (format nil "~A :: ~A" "Pair Behavior"
         "The equals sign (used on both sides) should permit delimiter changes."))

(is
 (mustache:render* "({{=[ ]=}}[text])"
                   (mustache:make-context :data `((:text . "It worked!"))
                                          :partials 'nil))
 "(It worked!)"
 (format nil "~A :: ~A" "Special Characters"
         "Characters with special meaning regexen should be valid delimiters."))

(is
 (mustache:render* "[
{{#section}}
  {{data}}
  |data|
{{/section}}

{{= | | =}}
|#section|
  {{data}}
  |data|
|/section|
]
"
                   (mustache:make-context :data
                                          `((:section . t)
                                            (:data . "I got interpolated."))
                                          :partials 'nil))
 "[
  I got interpolated.
  |data|

  {{data}}
  I got interpolated.
]
"
 (format nil "~A :: ~A" "Sections"
         "Delimiters set outside sections should persist."))

(is
 (mustache:render* "[
{{^section}}
  {{data}}
  |data|
{{/section}}

{{= | | =}}
|^section|
  {{data}}
  |data|
|/section|
]
"
                   (mustache:make-context :data
                                          `((:section)
                                            (:data . "I got interpolated."))
                                          :partials 'nil))
 "[
  I got interpolated.
  |data|

  {{data}}
  I got interpolated.
]
"
 (format nil "~A :: ~A" "Inverted Sections"
         "Delimiters set outside inverted sections should persist."))

(is
 (mustache:render* "[ {{>include}} ]
{{= | | =}}
[ |>include| ]
"
                   (mustache:make-context :data `((:value . "yes")) :partials
                                          '((:include . ".{{value}}."))))
 "[ .yes. ]
[ .yes. ]
"
 (format nil "~A :: ~A" "Partial Inheritence"
         "Delimiters set in a parent template should not affect a partial."))

(is
 (mustache:render* "[ {{>include}} ]
[ .{{value}}.  .|value|. ]
"
                   (mustache:make-context :data `((:value . "yes")) :partials
                                          '((:include
                                             . ".{{value}}. {{= | | =}} .|value|."))))
 "[ .yes.  .yes. ]
[ .yes.  .|value|. ]
"
 (format nil "~A :: ~A" "Post-Partial Behavior"
         "Delimiters set in a partial should not affect the parent template."))

(is
 (mustache:render* "| {{=@ @=}} |"
                   (mustache:make-context :data `nil :partials 'nil))
 "|  |"
 (format nil "~A :: ~A" "Surrounding Whitespace"
         "Surrounding whitespace should be left untouched."))

(is
 (mustache:render* " | {{=@ @=}}
"
                   (mustache:make-context :data `nil :partials 'nil))
 " | 
"
 (format nil "~A :: ~A" "Outlying Whitespace (Inline)"
         "Whitespace should be left untouched."))

(is
 (mustache:render* "Begin.
{{=@ @=}}
End.
"
                   (mustache:make-context :data `nil :partials 'nil))
 "Begin.
End.
"
 (format nil "~A :: ~A" "Standalone Tag"
         "Standalone lines should be removed from the template."))

(is
 (mustache:render* "Begin.
  {{=@ @=}}
End.
"
                   (mustache:make-context :data `nil :partials 'nil))
 "Begin.
End.
"
 (format nil "~A :: ~A" "Indented Standalone Tag"
         "Indented standalone lines should be removed from the template."))

(is
 (mustache:render* "|
{{= @ @ =}}
|"
                   (mustache:make-context :data `nil :partials 'nil))
 "|
|"
 (format nil "~A :: ~A" "Standalone Line Endings"
         "\"\\r\\n\" should be considered a newline for standalone tags."))

(is
 (mustache:render* "  {{=@ @=}}
="
                   (mustache:make-context :data `nil :partials 'nil))
 "="
 (format nil "~A :: ~A" "Standalone Without Previous Line"
         "Standalone tags should not require a newline to precede them."))

(is
 (mustache:render* "=
  {{=@ @=}}"
                   (mustache:make-context :data `nil :partials 'nil))
 "=
"
 (format nil "~A :: ~A" "Standalone Without Newline"
         "Standalone tags should not require a newline to follow them."))

(is
 (mustache:render* "|{{= @   @ =}}|"
                   (mustache:make-context :data `nil :partials 'nil))
 "||"
 (format nil "~A :: ~A" "Pair with Padding"
         "Superfluous in-tag whitespace should be ignored."))

;; Spec filename: interpolation.json


(is
 (mustache:render* "Hello from {Mustache}!
"
                   (mustache:make-context :data `nil :partials 'nil))
 "Hello from {Mustache}!
"
 (format nil "~A :: ~A" "No Interpolation"
         "Mustache-free templates should render as-is."))

(is
 (mustache:render* "Hello, {{subject}}!
"
                   (mustache:make-context :data `((:subject . "world"))
                                          :partials 'nil))
 "Hello, world!
"
 (format nil "~A :: ~A" "Basic Interpolation"
         "Unadorned tags should interpolate content into the template."))

(is
 (mustache:render* "{{template}}: {{planet}}"
                   (mustache:make-context :data
                                          `((:template . "{{planet}}")
                                            (:planet . "Earth"))
                                          :partials 'nil))
 "{{planet}}: Earth"
 (format nil "~A :: ~A" "No Re-interpolation"
         "Interpolated tag output should not be re-interpolated."))

(is
 (mustache:render* "These characters should be HTML escaped: {{forbidden}}
"
                   (mustache:make-context :data `((:forbidden . "& \" < >"))
                                          :partials 'nil))
 "These characters should be HTML escaped: &amp; &quot; &lt; &gt;
"
 (format nil "~A :: ~A" "HTML Escaping"
         "Basic interpolation should be HTML escaped."))

(is
 (mustache:render* "These characters should not be HTML escaped: {{{forbidden}}}
"
                   (mustache:make-context :data `((:forbidden . "& \" < >"))
                                          :partials 'nil))
 "These characters should not be HTML escaped: & \" < >
"
 (format nil "~A :: ~A" "Triple Mustache"
         "Triple mustaches should interpolate without HTML escaping."))

(is
 (mustache:render* "These characters should not be HTML escaped: {{&forbidden}}
"
                   (mustache:make-context :data `((:forbidden . "& \" < >"))
                                          :partials 'nil))
 "These characters should not be HTML escaped: & \" < >
"
 (format nil "~A :: ~A" "Ampersand"
         "Ampersand should interpolate without HTML escaping."))

(is
 (mustache:render* "\"{{mph}} miles an hour!\""
                   (mustache:make-context :data `((:mph . 85)) :partials 'nil))
 "\"85 miles an hour!\""
 (format nil "~A :: ~A" "Basic Integer Interpolation"
         "Integers should interpolate seamlessly."))

(is
 (mustache:render* "\"{{{mph}}} miles an hour!\""
                   (mustache:make-context :data `((:mph . 85)) :partials 'nil))
 "\"85 miles an hour!\""
 (format nil "~A :: ~A" "Triple Mustache Integer Interpolation"
         "Integers should interpolate seamlessly."))

(is
 (mustache:render* "\"{{&mph}} miles an hour!\""
                   (mustache:make-context :data `((:mph . 85)) :partials 'nil))
 "\"85 miles an hour!\""
 (format nil "~A :: ~A" "Ampersand Integer Interpolation"
         "Integers should interpolate seamlessly."))

(is
 (mustache:render* "\"{{power}} jiggawatts!\""
                   (mustache:make-context :data `((:power . 1.21)) :partials
                                          'nil))
 "\"1.21 jiggawatts!\""
 (format nil "~A :: ~A" "Basic Decimal Interpolation"
         "Decimals should interpolate seamlessly with proper significance."))

(is
 (mustache:render* "\"{{{power}}} jiggawatts!\""
                   (mustache:make-context :data `((:power . 1.21)) :partials
                                          'nil))
 "\"1.21 jiggawatts!\""
 (format nil "~A :: ~A" "Triple Mustache Decimal Interpolation"
         "Decimals should interpolate seamlessly with proper significance."))

(is
 (mustache:render* "\"{{&power}} jiggawatts!\""
                   (mustache:make-context :data `((:power . 1.21)) :partials
                                          'nil))
 "\"1.21 jiggawatts!\""
 (format nil "~A :: ~A" "Ampersand Decimal Interpolation"
         "Decimals should interpolate seamlessly with proper significance."))

(is
 (mustache:render* "I ({{cannot}}) be seen!"
                   (mustache:make-context :data `((:cannot)) :partials 'nil))
 "I () be seen!"
 (format nil "~A :: ~A" "Basic Null Interpolation"
         "Nulls should interpolate as the empty string."))

(is
 (mustache:render* "I ({{{cannot}}}) be seen!"
                   (mustache:make-context :data `((:cannot)) :partials 'nil))
 "I () be seen!"
 (format nil "~A :: ~A" "Triple Mustache Null Interpolation"
         "Nulls should interpolate as the empty string."))

(is
 (mustache:render* "I ({{&cannot}}) be seen!"
                   (mustache:make-context :data `((:cannot)) :partials 'nil))
 "I () be seen!"
 (format nil "~A :: ~A" "Ampersand Null Interpolation"
         "Nulls should interpolate as the empty string."))

(is
 (mustache:render* "I ({{cannot}}) be seen!"
                   (mustache:make-context :data `nil :partials 'nil))
 "I () be seen!"
 (format nil "~A :: ~A" "Basic Context Miss Interpolation"
         "Failed context lookups should default to empty strings."))

(is
 (mustache:render* "I ({{{cannot}}}) be seen!"
                   (mustache:make-context :data `nil :partials 'nil))
 "I () be seen!"
 (format nil "~A :: ~A" "Triple Mustache Context Miss Interpolation"
         "Failed context lookups should default to empty strings."))

(is
 (mustache:render* "I ({{&cannot}}) be seen!"
                   (mustache:make-context :data `nil :partials 'nil))
 "I () be seen!"
 (format nil "~A :: ~A" "Ampersand Context Miss Interpolation"
         "Failed context lookups should default to empty strings."))

(is
 (mustache:render* "\"{{person.name}}\" == \"{{#person}}{{name}}{{/person}}\""
                   (mustache:make-context :data `((:person (:name . "Joe")))
                                          :partials 'nil))
 "\"Joe\" == \"Joe\""
 (format nil "~A :: ~A" "Dotted Names - Basic Interpolation"
         "Dotted names should be considered a form of shorthand for sections."))

(is
 (mustache:render*
  "\"{{{person.name}}}\" == \"{{#person}}{{{name}}}{{/person}}\""
  (mustache:make-context :data `((:person (:name . "Joe"))) :partials 'nil))
 "\"Joe\" == \"Joe\""
 (format nil "~A :: ~A" "Dotted Names - Triple Mustache Interpolation"
         "Dotted names should be considered a form of shorthand for sections."))

(is
 (mustache:render*
  "\"{{&person.name}}\" == \"{{#person}}{{&name}}{{/person}}\""
  (mustache:make-context :data `((:person (:name . "Joe"))) :partials 'nil))
 "\"Joe\" == \"Joe\""
 (format nil "~A :: ~A" "Dotted Names - Ampersand Interpolation"
         "Dotted names should be considered a form of shorthand for sections."))

(is
 (mustache:render* "\"{{a.b.c.d.e.name}}\" == \"Phil\""
                   (mustache:make-context :data
                                          `((:a
                                             (:b
                                              (:c
                                               (:d (:e (:name . "Phil")))))))
                                          :partials 'nil))
 "\"Phil\" == \"Phil\""
 (format nil "~A :: ~A" "Dotted Names - Arbitrary Depth"
         "Dotted names should be functional to any level of nesting."))

(is
 (mustache:render* "\"{{a.b.c}}\" == \"\""
                   (mustache:make-context :data `((:a)) :partials 'nil))
 "\"\" == \"\""
 (format nil "~A :: ~A" "Dotted Names - Broken Chains"
         "Any falsey value prior to the last part of the name should yield ''."))

(is
 (mustache:render* "\"{{a.b.c.name}}\" == \"\""
                   (mustache:make-context :data
                                          `((:a (:b)) (:c (:name . "Jim")))
                                          :partials 'nil))
 "\"\" == \"\""
 (format nil "~A :: ~A" "Dotted Names - Broken Chain Resolution"
         "Each part of a dotted name should resolve only against its parent."))

(is
 (mustache:render* "\"{{#a}}{{b.c.d.e.name}}{{/a}}\" == \"Phil\""
                   (mustache:make-context :data
                                          `((:a
                                             (:b
                                              (:c (:d (:e (:name . "Phil"))))))
                                            (:b
                                             (:c (:d (:e (:name . "Wrong"))))))
                                          :partials 'nil))
 "\"Phil\" == \"Phil\""
 (format nil "~A :: ~A" "Dotted Names - Initial Resolution"
         "The first part of a dotted name should resolve as any other name."))

(is
 (mustache:render* "{{#a}}{{b.c}}{{/a}}"
                   (mustache:make-context :data
                                          `((:a (:b)) (:b (:c . "ERROR")))
                                          :partials 'nil))
 ""
 (format nil "~A :: ~A" "Dotted Names - Context Precedence"
         "Dotted names should be resolved against former resolutions."))

(is
 (mustache:render* "{{a.b}}"
                   (mustache:make-context :data `((:a.b . "c")) :partials
                                          'nil))
 ""
 (format nil "~A :: ~A" "Dotted Names are never single keys"
         "Dotted names shall not be parsed as single, atomic keys"))

(is
 (mustache:render* "{{a.b}}"
                   (mustache:make-context :data `((:a.b . "c") (:a (:b . "d")))
                                          :partials 'nil))
 "d"
 (format nil "~A :: ~A" "Dotted Names - No Masking"
         "Dotted Names in a given context are unvavailable due to dot splitting"))

(is
 (mustache:render* "Hello, {{.}}!
"
                   (mustache:make-context :data `"world" :partials 'nil))
 "Hello, world!
"
 (format nil "~A :: ~A" "Implicit Iterators - Basic Interpolation"
         "Unadorned tags should interpolate content into the template."))

(is
 (mustache:render* "These characters should be HTML escaped: {{.}}
"
                   (mustache:make-context :data `"& \" < >" :partials 'nil))
 "These characters should be HTML escaped: &amp; &quot; &lt; &gt;
"
 (format nil "~A :: ~A" "Implicit Iterators - HTML Escaping"
         "Basic interpolation should be HTML escaped."))

(is
 (mustache:render* "These characters should not be HTML escaped: {{{.}}}
"
                   (mustache:make-context :data `"& \" < >" :partials 'nil))
 "These characters should not be HTML escaped: & \" < >
"
 (format nil "~A :: ~A" "Implicit Iterators - Triple Mustache"
         "Triple mustaches should interpolate without HTML escaping."))

(is
 (mustache:render* "These characters should not be HTML escaped: {{&.}}
"
                   (mustache:make-context :data `"& \" < >" :partials 'nil))
 "These characters should not be HTML escaped: & \" < >
"
 (format nil "~A :: ~A" "Implicit Iterators - Ampersand"
         "Ampersand should interpolate without HTML escaping."))

(is
 (mustache:render* "\"{{.}} miles an hour!\""
                   (mustache:make-context :data `85 :partials 'nil))
 "\"85 miles an hour!\""
 (format nil "~A :: ~A" "Implicit Iterators - Basic Integer Interpolation"
         "Integers should interpolate seamlessly."))

(is
 (mustache:render* "| {{string}} |"
                   (mustache:make-context :data `((:string . "---")) :partials
                                          'nil))
 "| --- |"
 (format nil "~A :: ~A" "Interpolation - Surrounding Whitespace"
         "Interpolation should not alter surrounding whitespace."))

(is
 (mustache:render* "| {{{string}}} |"
                   (mustache:make-context :data `((:string . "---")) :partials
                                          'nil))
 "| --- |"
 (format nil "~A :: ~A" "Triple Mustache - Surrounding Whitespace"
         "Interpolation should not alter surrounding whitespace."))

(is
 (mustache:render* "| {{&string}} |"
                   (mustache:make-context :data `((:string . "---")) :partials
                                          'nil))
 "| --- |"
 (format nil "~A :: ~A" "Ampersand - Surrounding Whitespace"
         "Interpolation should not alter surrounding whitespace."))

(is
 (mustache:render* "  {{string}}
"
                   (mustache:make-context :data `((:string . "---")) :partials
                                          'nil))
 "  ---
"
 (format nil "~A :: ~A" "Interpolation - Standalone"
         "Standalone interpolation should not alter surrounding whitespace."))

(is
 (mustache:render* "  {{{string}}}
"
                   (mustache:make-context :data `((:string . "---")) :partials
                                          'nil))
 "  ---
"
 (format nil "~A :: ~A" "Triple Mustache - Standalone"
         "Standalone interpolation should not alter surrounding whitespace."))

(is
 (mustache:render* "  {{&string}}
"
                   (mustache:make-context :data `((:string . "---")) :partials
                                          'nil))
 "  ---
"
 (format nil "~A :: ~A" "Ampersand - Standalone"
         "Standalone interpolation should not alter surrounding whitespace."))

(is
 (mustache:render* "|{{ string }}|"
                   (mustache:make-context :data `((:string . "---")) :partials
                                          'nil))
 "|---|"
 (format nil "~A :: ~A" "Interpolation With Padding"
         "Superfluous in-tag whitespace should be ignored."))

(is
 (mustache:render* "|{{{ string }}}|"
                   (mustache:make-context :data `((:string . "---")) :partials
                                          'nil))
 "|---|"
 (format nil "~A :: ~A" "Triple Mustache With Padding"
         "Superfluous in-tag whitespace should be ignored."))

(is
 (mustache:render* "|{{& string }}|"
                   (mustache:make-context :data `((:string . "---")) :partials
                                          'nil))
 "|---|"
 (format nil "~A :: ~A" "Ampersand With Padding"
         "Superfluous in-tag whitespace should be ignored."))

;; Spec filename: inverted.json


(is
 (mustache:render* "\"{{^boolean}}This should be rendered.{{/boolean}}\""
                   (mustache:make-context :data `((:boolean)) :partials 'nil))
 "\"This should be rendered.\""
 (format nil "~A :: ~A" "Falsey"
         "Falsey sections should have their contents rendered."))

(is
 (mustache:render* "\"{{^boolean}}This should not be rendered.{{/boolean}}\""
                   (mustache:make-context :data `((:boolean . t)) :partials
                                          'nil))
 "\"\""
 (format nil "~A :: ~A" "Truthy"
         "Truthy sections should have their contents omitted."))

(is
 (mustache:render* "\"{{^null}}This should be rendered.{{/null}}\""
                   (mustache:make-context :data `((:null)) :partials 'nil))
 "\"This should be rendered.\""
 (format nil "~A :: ~A" "Null is falsey" "Null is falsey."))

(is
 (mustache:render* "\"{{^context}}Hi {{name}}.{{/context}}\""
                   (mustache:make-context :data `((:context (:name . "Joe")))
                                          :partials 'nil))
 "\"\""
 (format nil "~A :: ~A" "Context"
         "Objects and hashes should behave like truthy values."))

(is
 (mustache:render* "\"{{^list}}{{n}}{{/list}}\""
                   (mustache:make-context :data
                                          `((:list
                                             . #(((:n . 1)) ((:n . 2))
                                                 ((:n . 3)))))
                                          :partials 'nil))
 "\"\""
 (format nil "~A :: ~A" "List" "Lists should behave like truthy values."))

(is
 (mustache:render* "\"{{^list}}Yay lists!{{/list}}\""
                   (mustache:make-context :data `((:list . #())) :partials
                                          'nil))
 "\"Yay lists!\""
 (format nil "~A :: ~A" "Empty List"
         "Empty lists should behave like falsey values."))

(is
 (mustache:render* "{{^bool}}
* first
{{/bool}}
* {{two}}
{{^bool}}
* third
{{/bool}}
"
                   (mustache:make-context :data `((:bool) (:two . "second"))
                                          :partials 'nil))
 "* first
* second
* third
"
 (format nil "~A :: ~A" "Doubled"
         "Multiple inverted sections per template should be permitted."))

(is
 (mustache:render* "| A {{^bool}}B {{^bool}}C{{/bool}} D{{/bool}} E |"
                   (mustache:make-context :data `((:bool)) :partials 'nil))
 "| A B C D E |"
 (format nil "~A :: ~A" "Nested (Falsey)"
         "Nested falsey sections should have their contents rendered."))

(is
 (mustache:render* "| A {{^bool}}B {{^bool}}C{{/bool}} D{{/bool}} E |"
                   (mustache:make-context :data `((:bool . t)) :partials 'nil))
 "| A  E |"
 (format nil "~A :: ~A" "Nested (Truthy)"
         "Nested truthy sections should be omitted."))

(is
 (mustache:render* "[{{^missing}}Cannot find key 'missing'!{{/missing}}]"
                   (mustache:make-context :data `nil :partials 'nil))
 "[Cannot find key 'missing'!]"
 (format nil "~A :: ~A" "Context Misses"
         "Failed context lookups should be considered falsey."))

(is
 (mustache:render* "\"{{^a.b.c}}Not Here{{/a.b.c}}\" == \"\""
                   (mustache:make-context :data `((:a (:b (:c . t)))) :partials
                                          'nil))
 "\"\" == \"\""
 (format nil "~A :: ~A" "Dotted Names - Truthy"
         "Dotted names should be valid for Inverted Section tags."))

(is
 (mustache:render* "\"{{^a.b.c}}Not Here{{/a.b.c}}\" == \"Not Here\""
                   (mustache:make-context :data `((:a (:b (:c)))) :partials
                                          'nil))
 "\"Not Here\" == \"Not Here\""
 (format nil "~A :: ~A" "Dotted Names - Falsey"
         "Dotted names should be valid for Inverted Section tags."))

(is
 (mustache:render* "\"{{^a.b.c}}Not Here{{/a.b.c}}\" == \"Not Here\""
                   (mustache:make-context :data `((:a)) :partials 'nil))
 "\"Not Here\" == \"Not Here\""
 (format nil "~A :: ~A" "Dotted Names - Broken Chains"
         "Dotted names that cannot be resolved should be considered falsey."))

(is
 (mustache:render* " | {{^boolean}}	|	{{/boolean}} | 
"
                   (mustache:make-context :data `((:boolean)) :partials 'nil))
 " | 	|	 | 
"
 (format nil "~A :: ~A" "Surrounding Whitespace"
         "Inverted sections should not alter surrounding whitespace."))

(is
 (mustache:render* " | {{^boolean}} {{! Important Whitespace }}
 {{/boolean}} | 
"
                   (mustache:make-context :data `((:boolean)) :partials 'nil))
 " |  
  | 
"
 (format nil "~A :: ~A" "Internal Whitespace"
         "Inverted should not alter internal whitespace."))

(is
 (mustache:render* " {{^boolean}}NO{{/boolean}}
 {{^boolean}}WAY{{/boolean}}
"
                   (mustache:make-context :data `((:boolean)) :partials 'nil))
 " NO
 WAY
"
 (format nil "~A :: ~A" "Indented Inline Sections"
         "Single-line sections should not alter surrounding whitespace."))

(is
 (mustache:render* "| This Is
{{^boolean}}
|
{{/boolean}}
| A Line
"
                   (mustache:make-context :data `((:boolean)) :partials 'nil))
 "| This Is
|
| A Line
"
 (format nil "~A :: ~A" "Standalone Lines"
         "Standalone lines should be removed from the template."))

(is
 (mustache:render* "| This Is
  {{^boolean}}
|
  {{/boolean}}
| A Line
"
                   (mustache:make-context :data `((:boolean)) :partials 'nil))
 "| This Is
|
| A Line
"
 (format nil "~A :: ~A" "Standalone Indented Lines"
         "Standalone indented lines should be removed from the template."))

(is
 (mustache:render* "|
{{^boolean}}
{{/boolean}}
|"
                   (mustache:make-context :data `((:boolean)) :partials 'nil))
 "|
|"
 (format nil "~A :: ~A" "Standalone Line Endings"
         "\"\\r\\n\" should be considered a newline for standalone tags."))

(is
 (mustache:render* "  {{^boolean}}
^{{/boolean}}
/"
                   (mustache:make-context :data `((:boolean)) :partials 'nil))
 "^
/"
 (format nil "~A :: ~A" "Standalone Without Previous Line"
         "Standalone tags should not require a newline to precede them."))

(is
 (mustache:render* "^{{^boolean}}
/
  {{/boolean}}"
                   (mustache:make-context :data `((:boolean)) :partials 'nil))
 "^
/
"
 (format nil "~A :: ~A" "Standalone Without Newline"
         "Standalone tags should not require a newline to follow them."))

(is
 (mustache:render* "|{{^ boolean }}={{/ boolean }}|"
                   (mustache:make-context :data `((:boolean)) :partials 'nil))
 "|=|"
 (format nil "~A :: ~A" "Padding"
         "Superfluous in-tag whitespace should be ignored."))

;; Spec filename: partials.json


(is
 (mustache:render* "\"{{>text}}\""
                   (mustache:make-context :data `nil :partials
                                          '((:text . "from partial"))))
 "\"from partial\""
 (format nil "~A :: ~A" "Basic Behavior"
         "The greater-than operator should expand to the named partial."))

(is
 (mustache:render* "\"{{>text}}\""
                   (mustache:make-context :data `nil :partials 'nil))
 "\"\""
 (format nil "~A :: ~A" "Failed Lookup"
         "The empty string should be used when the named partial is not found."))

(is
 (mustache:render* "\"{{>partial}}\""
                   (mustache:make-context :data `((:text . "content"))
                                          :partials
                                          '((:partial . "*{{text}}*"))))
 "\"*content*\""
 (format nil "~A :: ~A" "Context"
         "The greater-than operator should operate within the current context."))

(is
 (mustache:render* "{{>node}}"
                   (mustache:make-context :data
                                          `((:content . "X")
                                            (:nodes
                                             . #(((:content . "Y")
                                                  (:nodes . #())))))
                                          :partials
                                          '((:node
                                             . "{{content}}<{{#nodes}}{{>node}}{{/nodes}}>"))))
 "X<Y<>>"
 (format nil "~A :: ~A" "Recursion"
         "The greater-than operator should properly recurse."))

(is
 (mustache:render* "{{>outer}}"
                   (mustache:make-context :data
                                          `((:a . "hello") (:b . "world"))
                                          :partials
                                          '((:outer . "*{{a}} {{>inner}}*")
                                            (:inner . "{{b}}!"))))
 "*hello world!*"
 (format nil "~A :: ~A" "Nested"
         "The greater-than operator should work from within partials."))

(is
 (mustache:render* "| {{>partial}} |"
                   (mustache:make-context :data `nil :partials
                                          '((:partial . "	|	"))))
 "| 	|	 |"
 (format nil "~A :: ~A" "Surrounding Whitespace"
         "The greater-than operator should not alter surrounding whitespace."))

(is
 (mustache:render* "  {{data}}  {{> partial}}
"
                   (mustache:make-context :data `((:data . "|")) :partials
                                          '((:partial . ">
>"))))
 "  |  >
>
"
 (format nil "~A :: ~A" "Inline Indentation"
         "Whitespace should be left untouched."))

(is
 (mustache:render* "|
{{>partial}}
|"
                   (mustache:make-context :data `nil :partials
                                          '((:partial . ">"))))
 "|
>|"
 (format nil "~A :: ~A" "Standalone Line Endings"
         "\"\\r\\n\" should be considered a newline for standalone tags."))

(is
 (mustache:render* "  {{>partial}}
>"
                   (mustache:make-context :data `nil :partials
                                          '((:partial . ">
>"))))
 "  >
  >>"
 (format nil "~A :: ~A" "Standalone Without Previous Line"
         "Standalone tags should not require a newline to precede them."))

(is
 (mustache:render* ">
  {{>partial}}"
                   (mustache:make-context :data `nil :partials
                                          '((:partial . ">
>"))))
 ">
  >
  >"
 (format nil "~A :: ~A" "Standalone Without Newline"
         "Standalone tags should not require a newline to follow them."))

(is
 (mustache:render* "\\
 {{>partial}}
/
"
                   (mustache:make-context :data
                                          `((:content . "<
->"))
                                          :partials
                                          '((:partial . "|
{{{content}}}
|
"))))
 "\\
 |
 <
->
 |
/
"
 (format nil "~A :: ~A" "Standalone Indentation"
         "Each line of the partial should be indented before rendering."))

(is
 (mustache:render* "|{{> partial }}|"
                   (mustache:make-context :data `((:boolean . t)) :partials
                                          '((:partial . "[]"))))
 "|[]|"
 (format nil "~A :: ~A" "Padding Whitespace"
         "Superfluous in-tag whitespace should be ignored."))

;; Spec filename: sections.json


(is
 (mustache:render* "\"{{#boolean}}This should be rendered.{{/boolean}}\""
                   (mustache:make-context :data `((:boolean . t)) :partials
                                          'nil))
 "\"This should be rendered.\""
 (format nil "~A :: ~A" "Truthy"
         "Truthy sections should have their contents rendered."))

(is
 (mustache:render* "\"{{#boolean}}This should not be rendered.{{/boolean}}\""
                   (mustache:make-context :data `((:boolean)) :partials 'nil))
 "\"\""
 (format nil "~A :: ~A" "Falsey"
         "Falsey sections should have their contents omitted."))

(is
 (mustache:render* "\"{{#null}}This should not be rendered.{{/null}}\""
                   (mustache:make-context :data `((:null)) :partials 'nil))
 "\"\"" (format nil "~A :: ~A" "Null is falsey" "Null is falsey."))

(is
 (mustache:render* "\"{{#context}}Hi {{name}}.{{/context}}\""
                   (mustache:make-context :data `((:context (:name . "Joe")))
                                          :partials 'nil))
 "\"Hi Joe.\""
 (format nil "~A :: ~A" "Context"
         "Objects and hashes should be pushed onto the context stack."))

(is
 (mustache:render* "\"{{#sec}}{{a}}, {{b}}, {{c.d}}{{/sec}}\""
                   (mustache:make-context :data
                                          `((:a . "foo") (:b . "wrong")
                                            (:sec (:b . "bar"))
                                            (:c (:d . "baz")))
                                          :partials 'nil))
 "\"foo, bar, baz\""
 (format nil "~A :: ~A" "Parent contexts"
         "Names missing in the current context are looked up in the stack."))

(is
 (mustache:render* "\"{{#foo}}{{.}} is {{foo}}{{/foo}}\""
                   (mustache:make-context :data `((:foo . "bar")) :partials
                                          'nil))
 "\"bar is bar\""
 (format nil "~A :: ~A" "Variable test"
         "Non-false sections have their value at the top of context,
accessible as {{.}} or through the parent context. This gives
a simple way to display content conditionally if a variable exists.
"))

(is
 (mustache:render*
  "{{#tops}}{{#middles}}{{tname.lower}}{{mname}}.{{#bottoms}}{{tname.upper}}{{mname}}{{bname}}.{{/bottoms}}{{/middles}}{{/tops}}"
  (mustache:make-context :data
                         `((:tops
                            . #(((:tname (:upper . "A") (:lower . "a"))
                                 (:middles
                                  . #(((:mname . "1")
                                       (:bottoms
                                        . #(((:bname . "x"))
                                            ((:bname . "y")))))))))))
                         :partials 'nil))
 "a1.A1x.A1y."
 (format nil "~A :: ~A" "List Contexts"
         "All elements on the context stack should be accessible within lists."))

(is
 (mustache:render* "{{#a}}
{{one}}
{{#b}}
{{one}}{{two}}{{one}}
{{#c}}
{{one}}{{two}}{{three}}{{two}}{{one}}
{{#d}}
{{one}}{{two}}{{three}}{{four}}{{three}}{{two}}{{one}}
{{#five}}
{{one}}{{two}}{{three}}{{four}}{{five}}{{four}}{{three}}{{two}}{{one}}
{{one}}{{two}}{{three}}{{four}}{{.}}6{{.}}{{four}}{{three}}{{two}}{{one}}
{{one}}{{two}}{{three}}{{four}}{{five}}{{four}}{{three}}{{two}}{{one}}
{{/five}}
{{one}}{{two}}{{three}}{{four}}{{three}}{{two}}{{one}}
{{/d}}
{{one}}{{two}}{{three}}{{two}}{{one}}
{{/c}}
{{one}}{{two}}{{one}}
{{/b}}
{{one}}
{{/a}}
"
                   (mustache:make-context :data
                                          `((:a (:one . 1)) (:b (:two . 2))
                                            (:c (:three . 3)
                                             (:d (:four . 4) (:five . 5))))
                                          :partials 'nil))
 "1
121
12321
1234321
123454321
12345654321
123454321
1234321
12321
121
1
"
 (format nil "~A :: ~A" "Deeply Nested Contexts"
         "All elements on the context stack should be accessible."))

(is
 (mustache:render* "\"{{#list}}{{item}}{{/list}}\""
                   (mustache:make-context :data
                                          `((:list
                                             . #(((:item . 1)) ((:item . 2))
                                                 ((:item . 3)))))
                                          :partials 'nil))
 "\"123\""
 (format nil "~A :: ~A" "List"
         "Lists should be iterated; list items should visit the context stack."))

(is
 (mustache:render* "\"{{#list}}Yay lists!{{/list}}\""
                   (mustache:make-context :data `((:list . #())) :partials
                                          'nil))
 "\"\""
 (format nil "~A :: ~A" "Empty List"
         "Empty lists should behave like falsey values."))

(is
 (mustache:render* "{{#bool}}
* first
{{/bool}}
* {{two}}
{{#bool}}
* third
{{/bool}}
"
                   (mustache:make-context :data
                                          `((:bool . t) (:two . "second"))
                                          :partials 'nil))
 "* first
* second
* third
"
 (format nil "~A :: ~A" "Doubled"
         "Multiple sections per template should be permitted."))

(is
 (mustache:render* "| A {{#bool}}B {{#bool}}C{{/bool}} D{{/bool}} E |"
                   (mustache:make-context :data `((:bool . t)) :partials 'nil))
 "| A B C D E |"
 (format nil "~A :: ~A" "Nested (Truthy)"
         "Nested truthy sections should have their contents rendered."))

(is
 (mustache:render* "| A {{#bool}}B {{#bool}}C{{/bool}} D{{/bool}} E |"
                   (mustache:make-context :data `((:bool)) :partials 'nil))
 "| A  E |"
 (format nil "~A :: ~A" "Nested (Falsey)"
         "Nested falsey sections should be omitted."))

(is
 (mustache:render* "[{{#missing}}Found key 'missing'!{{/missing}}]"
                   (mustache:make-context :data `nil :partials 'nil))
 "[]"
 (format nil "~A :: ~A" "Context Misses"
         "Failed context lookups should be considered falsey."))

(is
 (mustache:render* "\"{{#list}}({{.}}){{/list}}\""
                   (mustache:make-context :data
                                          `((:list . #("a" "b" "c" "d" "e")))
                                          :partials 'nil))
 "\"(a)(b)(c)(d)(e)\""
 (format nil "~A :: ~A" "Implicit Iterator - String"
         "Implicit iterators should directly interpolate strings."))

(is
 (mustache:render* "\"{{#list}}({{.}}){{/list}}\""
                   (mustache:make-context :data `((:list . #(1 2 3 4 5)))
                                          :partials 'nil))
 "\"(1)(2)(3)(4)(5)\""
 (format nil "~A :: ~A" "Implicit Iterator - Integer"
         "Implicit iterators should cast integers to strings and interpolate."))

(is
 (mustache:render* "\"{{#list}}({{.}}){{/list}}\""
                   (mustache:make-context :data
                                          `((:list . #(1.1 2.2 3.3 4.4 5.5)))
                                          :partials 'nil))
 "\"(1.1)(2.2)(3.3)(4.4)(5.5)\""
 (format nil "~A :: ~A" "Implicit Iterator - Decimal"
         "Implicit iterators should cast decimals to strings and interpolate."))

(is
 (mustache:render* "\"{{#list}}({{#.}}{{.}}{{/.}}){{/list}}\""
                   (mustache:make-context :data
                                          `((:list
                                             . #(#(1 2 3) #("a" "b" "c"))))
                                          :partials 'nil))
 "\"(123)(abc)\""
 (format nil "~A :: ~A" "Implicit Iterator - Array"
         "Implicit iterators should allow iterating over nested arrays."))

(is
 (mustache:render* "\"{{#list}}({{.}}){{/list}}\""
                   (mustache:make-context :data
                                          `((:list . #("&" "\"" "<" ">")))
                                          :partials 'nil))
 "\"(&amp;)(&quot;)(&lt;)(&gt;)\""
 (format nil "~A :: ~A" "Implicit Iterator - HTML Escaping"
         "Implicit iterators with basic interpolation should be HTML escaped."))

(is
 (mustache:render* "\"{{#list}}({{{.}}}){{/list}}\""
                   (mustache:make-context :data
                                          `((:list . #("&" "\"" "<" ">")))
                                          :partials 'nil))
 "\"(&)(\")(<)(>)\""
 (format nil "~A :: ~A" "Implicit Iterator - Triple mustache"
         "Implicit iterators in triple mustache should interpolate without HTML escaping."))

(is
 (mustache:render* "\"{{#list}}({{&.}}){{/list}}\""
                   (mustache:make-context :data
                                          `((:list . #("&" "\"" "<" ">")))
                                          :partials 'nil))
 "\"(&)(\")(<)(>)\""
 (format nil "~A :: ~A" "Implicit Iterator - Ampersand"
         "Implicit iterators in an Ampersand tag should interpolate without HTML escaping."))

(is
 (mustache:render* "\"{{#.}}({{value}}){{/.}}\""
                   (mustache:make-context :data
                                          `#(((:value . "a")) ((:value . "b")))
                                          :partials 'nil))
 "\"(a)(b)\""
 (format nil "~A :: ~A" "Implicit Iterator - Root-level"
         "Implicit iterators should work on root-level lists."))

(is
 (mustache:render* "\"{{#a.b.c}}Here{{/a.b.c}}\" == \"Here\""
                   (mustache:make-context :data `((:a (:b (:c . t)))) :partials
                                          'nil))
 "\"Here\" == \"Here\""
 (format nil "~A :: ~A" "Dotted Names - Truthy"
         "Dotted names should be valid for Section tags."))

(is
 (mustache:render* "\"{{#a.b.c}}Here{{/a.b.c}}\" == \"\""
                   (mustache:make-context :data `((:a (:b (:c)))) :partials
                                          'nil))
 "\"\" == \"\""
 (format nil "~A :: ~A" "Dotted Names - Falsey"
         "Dotted names should be valid for Section tags."))

(is
 (mustache:render* "\"{{#a.b.c}}Here{{/a.b.c}}\" == \"\""
                   (mustache:make-context :data `((:a)) :partials 'nil))
 "\"\" == \"\""
 (format nil "~A :: ~A" "Dotted Names - Broken Chains"
         "Dotted names that cannot be resolved should be considered falsey."))

(is
 (mustache:render* " | {{#boolean}}	|	{{/boolean}} | 
"
                   (mustache:make-context :data `((:boolean . t)) :partials
                                          'nil))
 " | 	|	 | 
"
 (format nil "~A :: ~A" "Surrounding Whitespace"
         "Sections should not alter surrounding whitespace."))

(is
 (mustache:render* " | {{#boolean}} {{! Important Whitespace }}
 {{/boolean}} | 
"
                   (mustache:make-context :data `((:boolean . t)) :partials
                                          'nil))
 " |  
  | 
"
 (format nil "~A :: ~A" "Internal Whitespace"
         "Sections should not alter internal whitespace."))

(is
 (mustache:render* " {{#boolean}}YES{{/boolean}}
 {{#boolean}}GOOD{{/boolean}}
"
                   (mustache:make-context :data `((:boolean . t)) :partials
                                          'nil))
 " YES
 GOOD
"
 (format nil "~A :: ~A" "Indented Inline Sections"
         "Single-line sections should not alter surrounding whitespace."))

(is
 (mustache:render* "| This Is
{{#boolean}}
|
{{/boolean}}
| A Line
"
                   (mustache:make-context :data `((:boolean . t)) :partials
                                          'nil))
 "| This Is
|
| A Line
"
 (format nil "~A :: ~A" "Standalone Lines"
         "Standalone lines should be removed from the template."))

(is
 (mustache:render* "| This Is
  {{#boolean}}
|
  {{/boolean}}
| A Line
"
                   (mustache:make-context :data `((:boolean . t)) :partials
                                          'nil))
 "| This Is
|
| A Line
"
 (format nil "~A :: ~A" "Indented Standalone Lines"
         "Indented standalone lines should be removed from the template."))

(is
 (mustache:render* "|
{{#boolean}}
{{/boolean}}
|"
                   (mustache:make-context :data `((:boolean . t)) :partials
                                          'nil))
 "|
|"
 (format nil "~A :: ~A" "Standalone Line Endings"
         "\"\\r\\n\" should be considered a newline for standalone tags."))

(is
 (mustache:render* "  {{#boolean}}
#{{/boolean}}
/"
                   (mustache:make-context :data `((:boolean . t)) :partials
                                          'nil))
 "#
/"
 (format nil "~A :: ~A" "Standalone Without Previous Line"
         "Standalone tags should not require a newline to precede them."))

(is
 (mustache:render* "#{{#boolean}}
/
  {{/boolean}}"
                   (mustache:make-context :data `((:boolean . t)) :partials
                                          'nil))
 "#
/
"
 (format nil "~A :: ~A" "Standalone Without Newline"
         "Standalone tags should not require a newline to follow them."))

(is
 (mustache:render* "|{{# boolean }}={{/ boolean }}|"
                   (mustache:make-context :data `((:boolean . t)) :partials
                                          'nil))
 "|=|"
 (format nil "~A :: ~A" "Padding"
         "Superfluous in-tag whitespace should be ignored."))

;; Spec filename: ~dynamic-names.json


(is
 (mustache:render* "\"{{>*dynamic}}\""
                   (mustache:make-context :data `((:dynamic . "content"))
                                          :partials
                                          '((:content . "Hello, world!"))))
 "\"Hello, world!\""
 (format nil "~A :: ~A" "Basic Behavior - Partial"
         "The asterisk operator is used for dynamic partials."))

(is
 (mustache:render* "\"{{>*dynamic}}\""
                   (mustache:make-context :data
                                          `((:dynamic . "content")
                                            (:*dynamic . "wrong"))
                                          :partials
                                          '((:content . "Hello, world!")
                                            (:wrong . "Invisible"))))
 "\"Hello, world!\""
 (format nil "~A :: ~A" "Basic Behavior - Name Resolution"
         "The asterisk is not part of the name that will be resolved in the context.
"))

(is
 (mustache:render* "\"{{>*missing}}\""
                   (mustache:make-context :data `nil :partials
                                          '((:missing . "Hello, world!"))))
 "\"\""
 (format nil "~A :: ~A" "Context Misses - Partial"
         "Failed context lookups should be considered falsey."))

(is
 (mustache:render* "\"{{>*dynamic}}\""
                   (mustache:make-context :data `((:dynamic . "content"))
                                          :partials
                                          '((:foobar . "Hello, world!"))))
 "\"\""
 (format nil "~A :: ~A" "Failed Lookup - Partial"
         "The empty string should be used when the named partial is not found."))

(is
 (mustache:render* "\"{{>*example}}\""
                   (mustache:make-context :data
                                          `((:text . "Hello, world!")
                                            (:example . "partial"))
                                          :partials
                                          '((:partial . "*{{text}}*"))))
 "\"*Hello, world!*\""
 (format nil "~A :: ~A" "Context"
         "The dynamic partial should operate within the current context."))

(is
 (mustache:render* "\"{{>*foo.bar.baz}}\""
                   (mustache:make-context :data
                                          `((:text . "Hello, world!")
                                            (:foo (:bar (:baz . "partial"))))
                                          :partials
                                          '((:partial . "*{{text}}*"))))
 "\"*Hello, world!*\""
 (format nil "~A :: ~A" "Dotted Names"
         "The dynamic partial should operate within the current context."))

(is
 (mustache:render* "\"{{>*foo.bar.baz}}\""
                   (mustache:make-context :data
                                          `((:text . "Hello, world!")
                                            (:foo . "test")
                                            (:test (:bar (:baz . "partial"))))
                                          :partials
                                          '((:partial . "*{{text}}*"))))
 "\"\""
 (format nil "~A :: ~A" "Dotted Names - Operator Precedence"
         "The dotted name should be resolved entirely before being dereferenced."))

(is
 (mustache:render* "\"{{>*foo.bar.baz}}\""
                   (mustache:make-context :data
                                          `((:foo (:text . "Hello, world!")
                                             (:bar (:baz . "partial"))))
                                          :partials
                                          '((:partial . "*{{text}}*"))))
 "\"**\""
 (format nil "~A :: ~A" "Dotted Names - Failed Lookup"
         "The dynamic partial should operate within the current context."))

(is
 (mustache:render* "{{#section1}}{{>*section2.dynamic}}{{/section1}}"
                   (mustache:make-context :data
                                          `((:section-1 (:value . "section1"))
                                            (:section-2 (:dynamic . "partial")
                                             (:value . "section2")))
                                          :partials
                                          '((:partial . "\"{{value}}\""))))
 "\"section1\""
 (format nil "~A :: ~A" "Dotted names - Context Stacking"
         "Dotted names should not push a new frame on the context stack."))

(is
 (mustache:render* "{{#section1}}{{>*section2.dynamic}}{{/section1}}"
                   (mustache:make-context :data
                                          `((:value . "test")
                                            (:section-1 . #(1 2))
                                            (:section-2 (:dynamic . "partial")
                                             (:value . "section2")))
                                          :partials
                                          '((:partial . "{{value}}"))))
 "testtest"
 (format nil "~A :: ~A" "Dotted names - Context Stacking Under Repetition"
         "Dotted names should not push a new frame on the context stack."))

(is
 (mustache:render* "{{#section1}}{{>*section2.dynamic}}{{/section1}}"
                   (mustache:make-context :data
                                          `((:section-1 . #(1 2))
                                            (:section-2 (:dynamic . "partial")
                                             (:value . "section2")))
                                          :partials
                                          '((:partial . "\"{{value}}\""))))
 "\"\"\"\""
 (format nil "~A :: ~A" "Dotted names - Context Stacking Failed Lookup"
         "Dotted names should resolve against the proper context stack."))

(is
 (mustache:render* "{{>*template}}"
                   (mustache:make-context :data
                                          `((:template . "node")
                                            (:content . "X")
                                            (:nodes
                                             . #(((:content . "Y")
                                                  (:nodes . #())))))
                                          :partials
                                          '((:node
                                             . "{{content}}<{{#nodes}}{{>*template}}{{/nodes}}>"))))
 "X<Y<>>"
 (format nil "~A :: ~A" "Recursion"
         "Dynamic partials should properly recurse."))

(is
 (mustache:render* "\"{{>**dynamic}}\""
                   (mustache:make-context :data
                                          `((:dynamic . "test")
                                            (:test . "content"))
                                          :partials
                                          '((:content . "Hello, world!"))))
 "\"\""
 (format nil "~A :: ~A" "Dynamic Names - Double Dereferencing"
         "Dynamic Names can't be dereferenced more than once."))

(is
 (mustache:render* "\"{{>*foo.*bar}}\""
                   (mustache:make-context :data
                                          `((:foo . "fizz") (:bar . "buzz")
                                            (:fizz (:buzz (:content))))
                                          :partials
                                          '((:content . "Hello, world!"))))
 "\"\""
 (format nil "~A :: ~A" "Dynamic Names - Composed Dereferencing"
         "Dotted Names are resolved entirely before dereferencing begins."))

(is
 (mustache:render* "| {{>*partial}} |"
                   (mustache:make-context :data `((:partial . "foobar"))
                                          :partials '((:foobar . "	|	"))))
 "| 	|	 |"
 (format nil "~A :: ~A" "Surrounding Whitespace"
         "A dynamic partial should not alter surrounding whitespace; any
whitespace preceding the tag should be treated as indentation while any
whitespace succeding the tag should be left untouched.
"))

(is
 (mustache:render* "  {{data}}  {{>*dynamic}}
"
                   (mustache:make-context :data
                                          `((:dynamic . "partial")
                                            (:data . "|"))
                                          :partials
                                          '((:partial . ">
>"))))
 "  |  >
>
"
 (format nil "~A :: ~A" "Inline Indentation"
         "Whitespace should be left untouched: whitespaces preceding the tag
should be treated as indentation.
"))

(is
 (mustache:render* "|
{{>*dynamic}}
|"
                   (mustache:make-context :data `((:dynamic . "partial"))
                                          :partials '((:partial . ">"))))
 "|
>|"
 (format nil "~A :: ~A" "Standalone Line Endings"
         "\"\\r\\n\" should be considered a newline for standalone tags."))

(is
 (mustache:render* "  {{>*dynamic}}
>"
                   (mustache:make-context :data `((:dynamic . "partial"))
                                          :partials
                                          '((:partial . ">
>"))))
 "  >
  >>"
 (format nil "~A :: ~A" "Standalone Without Previous Line"
         "Standalone tags should not require a newline to precede them."))

(is
 (mustache:render* ">
  {{>*dynamic}}"
                   (mustache:make-context :data `((:dynamic . "partial"))
                                          :partials
                                          '((:partial . ">
>"))))
 ">
  >
  >"
 (format nil "~A :: ~A" "Standalone Without Newline"
         "Standalone tags should not require a newline to follow them."))

(is
 (mustache:render* "\\
 {{>*dynamic}}
/
"
                   (mustache:make-context :data
                                          `((:dynamic . "partial")
                                            (:content . "<
->"))
                                          :partials
                                          '((:partial . "|
{{{content}}}
|
"))))
 "\\
 |
 <
->
 |
/
"
 (format nil "~A :: ~A" "Standalone Indentation"
         "Each line of the partial should be indented before rendering."))

(is
 (mustache:render* "|{{> * dynamic }}|"
                   (mustache:make-context :data
                                          `((:dynamic . "partial")
                                            (:boolean . t))
                                          :partials '((:partial . "[]"))))
 "|[]|"
 (format nil "~A :: ~A" "Padding Whitespace"
         "Superfluous in-tag whitespace should be ignored."))

;; Spec filename: ~inheritance.json


(is
 (mustache:render* "{{$title}}Default title{{/title}}
"
                   (mustache:make-context :data `nil :partials 'nil))
 "Default title
"
 (format nil "~A :: ~A" "Default"
         "Default content should be rendered if the block isn't overridden"))

(is
 (mustache:render* "{{$foo}}default {{bar}} content{{/foo}}
"
                   (mustache:make-context :data `((:bar . "baz")) :partials
                                          'nil))
 "default baz content
"
 (format nil "~A :: ~A" "Variable" "Default content renders variables"))

(is
 (mustache:render* "{{$foo}}default {{{bar}}} content{{/foo}}
"
                   (mustache:make-context :data `((:bar . "<baz>")) :partials
                                          'nil))
 "default <baz> content
"
 (format nil "~A :: ~A" "Triple Mustache"
         "Default content renders triple mustache variables"))

(is
 (mustache:render* "{{$foo}}default {{#bar}}{{baz}}{{/bar}} content{{/foo}}
"
                   (mustache:make-context :data `((:bar (:baz . "qux")))
                                          :partials 'nil))
 "default qux content
"
 (format nil "~A :: ~A" "Sections" "Default content renders sections"))

(is
 (mustache:render* "{{$foo}}default {{^bar}}{{baz}}{{/bar}} content{{/foo}}
"
                   (mustache:make-context :data `((:baz . "three")) :partials
                                          'nil))
 "default three content
"
 (format nil "~A :: ~A" "Negative Sections"
         "Default content renders negative sections"))

(is
 (mustache:render* "{{$foo}}default {{#bar}}{{baz}}{{/bar}} content{{/foo}}
"
                   (mustache:make-context :data `((:bar (:baz . "{{qux}}")))
                                          :partials 'nil))
 "default {{qux}} content
"
 (format nil "~A :: ~A" "Mustache Injection"
         "Mustache injection in default content"))

(is
 (mustache:render* "{{<include}}{{/include}}
"
                   (mustache:make-context :data `nil :partials
                                          '((:include
                                             . "{{$foo}}default content{{/foo}}"))))
 "default content"
 (format nil "~A :: ~A" "Inherit"
         "Default content rendered inside inherited templates"))

(is
 (mustache:render* "{{<super}}{{$title}}sub template title{{/title}}{{/super}}"
                   (mustache:make-context :data `nil :partials
                                          '((:super
                                             . "...{{$title}}Default title{{/title}}..."))))
 "...sub template title..."
 (format nil "~A :: ~A" "Overridden content" "Overridden content"))

(is
 (mustache:render* "{{<include}}{{$var}}var in template{{/var}}{{/include}}"
                   (mustache:make-context :data `((:var . "var in data"))
                                          :partials
                                          '((:include
                                             . "{{$var}}var in include{{/var}}"))))
 "var in template"
 (format nil "~A :: ~A" "Data does not override block"
         "Context does not override argument passed into parent"))

(is
 (mustache:render* "{{<include}}{{/include}}"
                   (mustache:make-context :data `((:var . "var in data"))
                                          :partials
                                          '((:include
                                             . "{{$var}}var in include{{/var}}"))))
 "var in include"
 (format nil "~A :: ~A" "Data does not override block default"
         "Context does not override default content of block"))

(is
 (mustache:render* "test {{<parent}}{{$stuff}}override{{/stuff}}{{/parent}}"
                   (mustache:make-context :data `nil :partials
                                          '((:parent
                                             . "{{$stuff}}...{{/stuff}}"))))
 "test override"
 (format nil "~A :: ~A" "Overridden parent" "Overridden parent"))

(is
 (mustache:render*
  "test {{<parent}}{{$stuff}}override1{{/stuff}}{{/parent}} {{<parent}}{{$stuff}}override2{{/stuff}}{{/parent}}
"
  (mustache:make-context :data `nil :partials
                         '((:parent
                            . "|{{$stuff}}...{{/stuff}}{{$default}} default{{/default}}|"))))
 "test |override1 default| |override2 default|
"
 (format nil "~A :: ~A" "Two overridden parents"
         "Two overridden parents with different content"))

(is
 (mustache:render* "{{<parent}}{{$ballmer}}
peaked

:(
{{/ballmer}}{{/parent}}"
                   (mustache:make-context :data `nil :partials
                                          '((:parent
                                             . "{{$ballmer}}peaking{{/ballmer}}"))))
 "peaked

:(
"
 (format nil "~A :: ~A" "Override parent with newlines"
         "Override parent with newlines"))

(is
 (mustache:render*
  "{{<parent}}{{$nineties}}hammer time{{/nineties}}{{/parent}}"
  (mustache:make-context :data `nil :partials
                         '((:parent . "stop:
  {{$nineties}}collaborate and listen{{/nineties}}
"))))
 "stop:
  hammer time
"
 (format nil "~A :: ~A" "Inherit indentation"
         "Inherit indentation when overriding a parent"))

(is
 (mustache:render* "{{<parent}}{{$stuff2}}override two{{/stuff2}}{{/parent}}"
                   (mustache:make-context :data `nil :partials
                                          '((:parent
                                             . "{{$stuff}}new default one{{/stuff}}, {{$stuff2}}new default two{{/stuff2}}"))))
 "new default one, override two"
 (format nil "~A :: ~A" "Only one override"
         "Override one parameter but not the other"))

(is
 (mustache:render* "{{>parent}}|{{<parent}}{{/parent}}"
                   (mustache:make-context :data `nil :partials
                                          '((:parent
                                             . "{{$foo}}default content{{/foo}}"))))
 "default content|default content"
 (format nil "~A :: ~A" "Parent template"
         "Parent templates behave identically to partials when called with no parameters"))

(is
 (mustache:render* "{{<parent}}{{$foo}}override{{/foo}}{{/parent}}"
                   (mustache:make-context :data `nil :partials
                                          '((:parent
                                             . "{{$foo}}default content{{/foo}} {{$bar}}{{<parent2}}{{/parent2}}{{/bar}}")
                                            (:parent-2
                                             . "{{$foo}}parent2 default content{{/foo}} {{<parent}}{{$bar}}don't recurse{{/bar}}{{/parent}}"))))
 "override override override don't recurse"
 (format nil "~A :: ~A" "Recursion" "Recursion in inherited templates"))

(is
 (mustache:render* "{{<parent}}{{$a}}c{{/a}}{{/parent}}"
                   (mustache:make-context :data `nil :partials
                                          '((:parent
                                             . "{{<older}}{{$a}}p{{/a}}{{/older}}")
                                            (:older
                                             . "{{<grandParent}}{{$a}}o{{/a}}{{/grandParent}}")
                                            (:grand-parent
                                             . "{{$a}}g{{/a}}"))))
 "c"
 (format nil "~A :: ~A" "Multi-level inheritance"
         "Top-level substitutions take precedence in multi-level inheritance"))

(is
 (mustache:render* "{{<parent}}{{/parent}}"
                   (mustache:make-context :data `nil :partials
                                          '((:parent
                                             . "{{<older}}{{$a}}p{{/a}}{{/older}}")
                                            (:older
                                             . "{{<grandParent}}{{$a}}o{{/a}}{{/grandParent}}")
                                            (:grand-parent
                                             . "{{$a}}g{{/a}}"))))
 "p"
 (format nil "~A :: ~A" "Multi-level inheritance, no sub child"
         "Top-level substitutions take precedence in multi-level inheritance"))

(is
 (mustache:render*
  "{{<parent}} asdfasd {{$foo}}hmm{{/foo}} asdfasdfasdf {{/parent}}"
  (mustache:make-context :data `nil :partials
                         '((:parent . "{{$foo}}default content{{/foo}}"))))
 "hmm"
 (format nil "~A :: ~A" "Text inside parent"
         "Ignores text inside parent templates, but does parse $ tags"))

(is
 (mustache:render* "{{<parent}} asdfasd asdfasdfasdf {{/parent}}"
                   (mustache:make-context :data `nil :partials
                                          '((:parent
                                             . "{{$foo}}default content{{/foo}}"))))
 "default content"
 (format nil "~A :: ~A" "Text inside parent"
         "Allows text inside a parent tag, but ignores it"))

(is
 (mustache:render* "{{<parent}}{{$block}}I say {{fruit}}.{{/block}}{{/parent}}"
                   (mustache:make-context :data
                                          `((:fruit . "apples")
                                            (:nested (:fruit . "bananas")))
                                          :partials
                                          '((:parent
                                             . "{{#nested}}{{$block}}You say {{fruit}}.{{/block}}{{/nested}}"))))
 "I say bananas."
 (format nil "~A :: ~A" "Block scope"
         "Scope of a substituted block is evaluated in the context of the parent template"))

(is
 (mustache:render* "Hi,
  {{<parent}}{{/parent}}
"
                   (mustache:make-context :data `nil :partials
                                          '((:parent . "one
two
"))))
 "Hi,
  one
  two
"
 (format nil "~A :: ~A" "Standalone parent"
         "A parent's opening and closing tags need not be on separate lines in order to be standalone"))

(is
 (mustache:render* "{{<parent}}{{$block}}
one
two{{/block}}
{{/parent}}
"
                   (mustache:make-context :data `nil :partials
                                          '((:parent . "Hi,
  {{$block}}{{/block}}
"))))
 "Hi,
  one
  two
"
 (format nil "~A :: ~A" "Standalone block"
         "A block's opening and closing tags need not be on separate lines in order to be standalone"))

(is
 (mustache:render* "{{<parent}}{{$block}}
    one
    two
{{/block}}{{/parent}}
"
                   (mustache:make-context :data `nil :partials
                                          '((:parent . "Hi,
  {{$block}}
  {{/block}}
"))))
 "Hi,
  one
  two
"
 (format nil "~A :: ~A" "Block reindentation"
         "Block indentation is removed at the site of definition and added at the site of expansion"))

(is
 (mustache:render* "{{<parent}}{{$block}}
one
two
{{/block}}{{/parent}}
"
                   (mustache:make-context :data `nil :partials
                                          '((:parent . "Hi,
{{$block}}
  default
{{/block}}
"))))
 "Hi,
  one
  two
"
 (format nil "~A :: ~A" "Intrinsic indentation"
         "When the block opening tag is standalone, indentation is determined by default content"))

(is
 (mustache:render* "{{<parent}}{{$nested}}
three
{{/nested}}{{/parent}}
"
                   (mustache:make-context :data `nil :partials
                                          '((:parent
                                             . "{{<grandparent}}{{$block}}
  one
  {{$nested}}
    two
  {{/nested}}
{{/block}}{{/grandparent}}
")
                                            (:grandparent
                                             . "{{$block}}default{{/block}}"))))
 "one
  three
"
 (format nil "~A :: ~A" "Nested block reindentation"
         "Nested blocks are reindented relative to the surrounding block"))

;; Spec filename: ~lambdas.json


(is
 (mustache:render* "Hello, {{lambda}}!"
                   (mustache:make-context :data
                                          `((:lambda . ,(lambda () "world")))
                                          :partials 'nil))
 "Hello, world!"
 (format nil "~A :: ~A" "Interpolation"
         "A lambda's return value should be interpolated."))

(is
 (mustache:render* "Hello, {{lambda}}!"
                   (mustache:make-context :data
                                          `((:planet . "world")
                                            (:lambda
                                             . ,(lambda () "{{planet}}")))
                                          :partials 'nil))
 "Hello, world!"
 (format nil "~A :: ~A" "Interpolation - Expansion"
         "A lambda's return value should be parsed."))

(is
 (mustache:render* "{{= | | =}}
Hello, (|&lambda|)!"
                   (mustache:make-context :data
                                          `((:planet . "world")
                                            (:lambda
                                             . ,(lambda () "|planet| => {{planet}}")))
                                          :partials 'nil))
 "Hello, (|planet| => world)!"
 (format nil "~A :: ~A" "Interpolation - Alternate Delimiters"
         "A lambda's return value should parse with the default delimiters."))

(is
 (mustache:render* "{{lambda}} == {{{lambda}}} == {{lambda}}"
                   (mustache:make-context :data
                                          `((:lambda
                                             . ,(let ((g 0)) (lambda () (incf g)))))
                                          :partials 'nil))
 "1 == 2 == 3"
 (format nil "~A :: ~A" "Interpolation - Multiple Calls"
         "Interpolated lambdas should not be cached."))

(is
 (mustache:render* "<{{lambda}}{{{lambda}}}"
                   (mustache:make-context :data `((:lambda . ,(lambda () ">")))
                                          :partials 'nil))
 "<&gt;>"
 (format nil "~A :: ~A" "Escaping"
         "Lambda results should be appropriately escaped."))

(is
 (mustache:render* "<{{#lambda}}{{x}}{{/lambda}}>"
                   (mustache:make-context :data
                                          `((:x . "Error!")
                                            (:lambda
                                             . ,(lambda (text) (if (string= text "{{x}}") "yes" "no"))))
                                          :partials 'nil))
 "<yes>"
 (format nil "~A :: ~A" "Section"
         "Lambdas used for sections should receive the raw section string."))

(is
 (mustache:render* "<{{#lambda}}-{{/lambda}}>"
                   (mustache:make-context :data
                                          `((:planet . "Earth")
                                            (:lambda
                                             . ,(lambda (text) (format nil "~a{{planet}}~a" text text))))
                                          :partials 'nil))
 "<-Earth->"
 (format nil "~A :: ~A" "Section - Expansion"
         "Lambdas used for sections should have their results parsed."))

(is
 (mustache:render* "{{= | | =}}<|#lambda|-|/lambda|>"
                   (mustache:make-context :data
                                          `((:planet . "Earth")
                                            (:lambda
                                             . ,(lambda (text) (format nil "~a{{planet}} => |planet|~a" text text))))
                                          :partials 'nil))
 "<-{{planet}} => Earth->"
 (format nil "~A :: ~A" "Section - Alternate Delimiters"
         "Lambdas used for sections should parse with the current delimiters."))

(is
 (mustache:render* "{{#lambda}}FILE{{/lambda}} != {{#lambda}}LINE{{/lambda}}"
                   (mustache:make-context :data
                                          `((:lambda
                                             . ,(lambda (text) (format nil "__~a__" text))))
                                          :partials 'nil))
 "__FILE__ != __LINE__"
 (format nil "~A :: ~A" "Section - Multiple Calls"
         "Lambdas used for sections should not be cached."))

(is
 (mustache:render* "<{{^lambda}}{{static}}{{/lambda}}>"
                   (mustache:make-context :data
                                          `((:static . "static")
                                            (:lambda
                                             . ,(lambda (text) (declare (ignore text)) nil)))
                                          :partials 'nil))
 "<>"
 (format nil "~A :: ~A" "Inverted Section"
         "Lambdas used for inverted sections should be considered truthy."))

(finalize)